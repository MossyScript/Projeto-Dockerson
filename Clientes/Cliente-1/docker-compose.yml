# clients/client1/docker-compose.yml

services:
  # Traefik do Cliente 1 (Proxy Reverso Interno para os serviços do Cliente 1)
  client1-traefik:
    container_name: client1-traefik
    image: traefik:latest
    restart: unless-stopped
    networks:
      - client1-network # Rede interna para os serviços do cliente 1
      - rede-ISP        # Conecta-se à rede do ISP para ser descoberto pelo Traefik principal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./Traefik/traefik-config.yaml:/etc/traefik/traefik.yaml:ro
    labels:
      # Labels para o Traefik do Cliente 1 gerenciar seu próprio dashboard (interno)
      - "traefik.enable=true"
      - "traefik.http.routers.client1-traefik-dashboard.rule=Host(`dashboard.client1.dockerson.br`)"
      - "traefik.http.routers.client1-traefik-dashboard.entrypoints=web"
      - "traefik.http.routers.client1-traefik-dashboard.service=api@internal"

      # Labels para o Traefik do ISP descobrir e rotear para os serviços do Cliente 1
      # As labels são lidas pelo ISP-Traefik. O serviço real que o ISP-Traefik verá é 'client1-traefik'
      # a porta é 80, que é a porta interna do client1-traefik.
      - "traefik.http.routers.client1-portal-router.rule=Host(`cliente1.dockerson.br`)"
      - "traefik.http.routers.client1-portal-router.entrypoints=web"
      - "traefik.http.services.client1-portal-service.loadbalancer.server.port=80" # Aponta para a porta interna do client1-traefik

      - "traefik.http.routers.client1-sign-app-router.rule=Host(`sign.client1.dockerson.br`)"
      - "traefik.http.routers.client1-sign-app-router.entrypoints=web"
      - "traefik.http.services.client1-sign-app-service.loadbalancer.server.port=80" # Aponta para a porta interna do client1-traefik

      - "traefik.http.routers.client1-sign-api-router.rule=Host(`api.client1.dockerson.br`)"
      - "traefik.http.routers.client1-sign-api-router.entrypoints=web"
      - "traefik.http.services.client1-sign-api-service.loadbalancer.server.port=80" # Aponta para a porta interna do client1-traefik

  # Portal do Cliente 1
  client1-portal:
    build:
      context: ./Portal # Onde está o Dockerfile do portal do Cliente 1
      dockerfile: Dockerfile
    container_name: client1-portal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client1-portal-internal.rule=Host(`cliente1.dockerson.br`)" # Regra interna para o Traefik do Cliente 1
      - "traefik.http.routers.client1-portal-internal.entrypoints=web"
      - "traefik.http.services.client1-portal-internal.loadbalancer.server.port=80" # Porta interna do Nginx do portal
    restart: unless-stopped
    networks:
      - client1-network #rede interna do Cliente 1

  # Hotsite do Cliente 1
  client1-hotsite:
    build:
      context: ./hotsite # Onde está o Dockerfile do hotsite do Cliente 1
      dockerfile: Dockerfile
    container_name: client1-hotsite
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client1-hotsite-internal.rule=Host(`cliente1.dockerson.br`) && PathPrefix(`/hotsite-client1`)"
      - "traefik.http.routers.client1-hotsite-internal.entrypoints=web"
      - "traefik.http.services.client1-hotsite-internal.loadbalancer.server.port=80"
    networks:
      - client1-network

  # Sign do Cliente 1
  client1-sign-db:
    image: postgres:15-alpine
    container_name: client1-sign-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - client1_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - client1-network

  # Backend/API para o Sign do Cliente 1
  client1-sign-api:
    image: salesfilho/sign-api:latest
    container_name: client1-sign-api
    environment:
      DB_HOST: client1-sign-db # Aponta para o nome do serviço do DB dentro desta rede
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    depends_on:
      client1-sign-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://client1-sign-api:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - client1-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client1-sign-api-internal.rule=Host(`api.client1.dockerson.br`)"
      - "traefik.http.routers.client1-sign-api-internal.entrypoints=web"
      - "traefik.http.services.client1-sign-api-internal.loadbalancer.server.port=8000"

  # Frontend / App para o Sign do Cliente 1
  client1-sign-app:
    image: salesfilho/sign-app:latest
    container_name: client1-sign-app
    environment:
      API_BASE_URL: http://api.client1.dockerson.br # O frontend se comunica com a API via domínio do Traefik interno
    depends_on:
      client1-sign-api:
        condition: service_healthy
    networks:
      - client1-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client1-sign-app-internal.rule=Host(`sign.client1.dockerson.br`)"
      - "traefik.http.routers.client1-sign-app-internal.entrypoints=web"
      - "traefik.http.services.client1-sign-app-internal.loadbalancer.server.port=80"

volumes:
  client1_postgres_data: # Volume persistente para o DB do Cliente 1

networks:
  client1-network:
    name: rede-cliente1
    external: true # Declare a rede interna do cliente como externa
  rede-ISP: # Declare a rede do ISP como externa para que o Traefik do Cliente 1 possa se conectar a ela
    name: rede-ISP
    external: true