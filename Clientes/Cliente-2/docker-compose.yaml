services:  
  Proxy-Client2:  
    image: nginx:latest 
    container_name: nginx-proxy2  
    restart: unless-stopped # Configura a política de reinício: o contêiner será reiniciado a menos que seja parado manualmente ou por erro.
    depends_on: # Lista de serviços dos quais este serviço depende para iniciar.
      - client2-portal # O proxy só iniciará depois que o portal do cliente 2 estiver rodando.
      - client2-wordpress # O proxy só iniciará depois que o WordPress do cliente 2 estiver rodando.
    volumes: # Mapeia caminhos do seu host para caminhos dentro do contêiner.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  
    networks: # Define as redes às quais este contêiner estará conectado.
      - rede-Client2  
      - proxy 
    labels: 
      - "traefik.enable=true"  

      - "traefik.http.routers.client2-portal-nginx-router.rule=Host(`portal.client2.dockerson.br`)" # Define uma regra de roteamento: se o host for 'portal.client2.dockerson.br', o Traefik encaminha para este serviço.
      - "traefik.http.routers.client2-portal-nginx-router.entrypoints=websecure" # Define o ponto de entrada (porta) para este roteador, 'websecure' geralmente indica HTTPS.
      - "traefik.http.routers.client2-portal-nginx-router.tls=true" # Habilita TLS (HTTPS) para este roteador.

      - "traefik.http.routers.client2-wordpress-nginx-router.rule=Host(`wordpress.client2.dockerson.br`)" # Regra de roteamento para o WordPress.
      - "traefik.http.routers.client2-wordpress-nginx-router.entrypoints=websecure" # Ponto de entrada websecure para o WordPress.
      - "traefik.http.routers.client2-wordpress-nginx-router.tls=true" # Habilita TLS para o WordPress.

      - "traefik.http.services.client2-nginx-service.loadbalancer.server.port=80" # Configura o Traefik para direcionar o tráfego para a porta 80 do contêiner 'Proxy-Client2'.



  # Portal do Cliente 2
  client2-portal:  
    image: nginx:latest 
    container_name: client2-portal  
    volumes: # Mapeia o arquivo index.html do seu host para o local de serviço do Nginx dentro do contêiner.
      - ./Portal/index.html:/usr/share/nginx/html/index.html:ro  
    networks: # Conecta-se à rede interna do Cliente 2.
      - rede-Client2



  # WordPress do Cliente 2
  client2-wordpress:  
    image: wordpress  
    restart: always  
    container_name: client2-wordpress  
    ports: # Mapeia portas do contêiner para portas no host.
      - 8083:80 
    environment: # Variáveis de ambiente para configurar a conexão do WordPress com o banco de dados.
      WORDPRESS_DB_HOST: db # O host do banco de dados é o nome do serviço 'db' dentro da rede Docker.
      WORDPRESS_DB_USER: exampleuser # Usuário do banco de dados para o WordPress.
      WORDPRESS_DB_PASSWORD: examplepass # Senha do banco de dados para o WordPress.
      WORDPRESS_DB_NAME: exampledb # Nome do banco de dados para o WordPress.
    volumes: # Mapeia um volume persistente para os arquivos do WordPress.
      - wordpress:/var/www/html  
    networks: # Conecta-se à rede interna do Cliente 2.
      - rede-Client2



  db:  
    image: mysql:8.0  
    restart: always  
    environment: # Variáveis de ambiente para configurar o MySQL.
      MYSQL_DATABASE: exampledb # Nome do banco de dados a ser criado.
      MYSQL_USER: exampleuser # Usuário do banco de dados.
      MYSQL_PASSWORD: examplepass # Senha do usuário do banco de dados.
      MYSQL_RANDOM_ROOT_PASSWORD: '1' # Define uma senha aleatória para o usuário root (segurança).
    volumes: # Mapeia um volume persistente para os dados do banco de dados.
      - db:/var/lib/mysql  
    networks: # Conecta-se à rede interna do Cliente 2.
      - rede-Client2



volumes: # Define volumes persistentes que podem ser usados pelos serviços.
  wordpress:  
  db:  



networks: # Define as redes Docker que serão usadas.
  rede-Client2:  
    external: true  
  proxy: 
    external: true  
